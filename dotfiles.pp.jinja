# vim:ft=puppet.ansible
# Site-configuration
$home = '{{ homedir }}'
$conf = '{{ confdir }}'
$user = '{{ user }}'

define mkdir_p($path = $title) {
  $path_parents = all_parents($path)
  each ($path_parents) |$dir| {
    if ! defined (File[$dir]) {
      file { $dir: ensure => directory }
    }
  }
  file { $path: ensure => directory }
}
define config_link($targetname = $title,
                   $sourcename = $title,
                   $linkprefix = "${home}/.",
                   $targetdir = "${conf}",
                   $require = [],
                  )
{
  file { "${linkprefix}${targetname}":
    ensure  => link,
    target  => "${targetdir}/${sourcename}",
    require => $require
  }
}

class xresources {
  file { "${conf}/generated/Xresources": }
  exec { 'concatenate_xresources':
    command     => "/bin/bash ${conf}/Xresources.d/compile.sh",
    environment => [ "CONFDIR=${conf}" ],
    onlyif      => "/bin/bash ${conf}/Xresources.d/check.sh",
  }
  config_link { 'Xresources':
    targetdir => "${conf}/generated"
  }
  File[ "${conf}/generated/Xresources" ] -> File[ "${home}/.Xresources" ]
}

class i3config {
  mkdir_p { "${home}/.i3": }
  exec { 'generate-i3-config':
    require     => File["${conf}/generated"],
    command     => "/usr/bin/python ${conf}/render_jinja.py ${conf}/i3wm/i3.${hostname}.config ${conf}/i3wm/templates",
    environment => [ "HOME=${home}", "OUTPUT_DIRECTORY=${conf}/generated" ]
  }
  file { "${home}/.i3/config":
    require   => [ File["${home}/.i3"], Exec['generate-i3-config'] ],
    ensure     => link,
    target     => "${conf}/generated/i3config"
  }
  $helpers = [ 'i3status-wrapper.py', 'i3sysctl' ]
  config_link { $helpers:
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/i3wm",
    require   => File["${home}/.local/bin"],
  }
  config_link { 'i3-smart-terminal':
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/generated",
    require   => File["${home}/.local/bin"],
  }
  config_link { 'lock-screensaver-on-activate.py':
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/i3wm",
    require   => File["${home}/.local/bin"],
  }
  config_link { 'dunstrc':
    linkprefix => "${home}/.config/dunst/",
    targetdir  => "${conf}/generated",
    require   => File["${home}/.local/bin"],
  }

  # per-machine lock script
  config_link { "lock":
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/i3wm",
    sourcename => "lock.${hostname}.sh",
    require    => File["${home}/.local/bin"],
  }

  # wallpaper slideshow
  config_link { "next_wallpaper.sh":
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/scripts"
  }
  File[ "${home}/.local/bin/next_wallpaper.sh" ] -> Exec[ 'user_crontab' ]

  mkdir_p { "${home}/.local/opt": }
  # custom network manager dmenu control app
  vcsrepo { "${home}/.local/opt/networkmanager-dmenu":
    ensure   => present,
    provider => git,
    source   => "https://github.com/firecat53/networkmanager-dmenu.git",
    revision => "v1.1",
    require  => File[ "${home}/.local/opt" ]
  }
  mkdir_p { "${home}/.config/networkmanager-dmenu": }
  config_link { "config.ini":
    sourcename => "networkmanager-dmenu.ini",
    linkprefix => "${home}/.config/networkmanager-dmenu/",
    targetdir  => "${conf}/generated",
    require    => File[ "${home}/.config/networkmanager-dmenu" ],
  }
  config_link { "xautolock.sh":
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/generated",
    require  => File[ "${home}/.local/bin" ],
  }
}

class user_crontab {
  $_host_crontab_dir = "${conf}/cron/${hostname}.d"
  exec { 'user_crontab':
    command     => "${conf}/cron/update_crontab.sh",
    onlyif      => [ "/usr/bin/test -d $_host_crontab_dir && ${conf}/cron/host_needs_crontab.sh" ],
    environment => [ "USER=${user}" ]
  }
}

class vimconfig {
  config_link { 'vimrc': }
  mkdir_p { "${home}/.vim": }
  $vim_subdirs = [ 'autoload', 'colors', 'ftdetect', 'ftplugin', 'indent',
                   'plugin', 'scripts', 'spell', 'syntax' ]
  config_link{ $vim_subdirs:
    linkprefix => "${home}/.vim/",
    targetdir => "${conf}/vim",
  }
  config_link{ 'vim/vimrc_bundle': }
  mkdir_p { "${home}/.vim/bundle": }
  vcsrepo { "${home}/.vim/bundle/Vundle.vim":
    ensure => present,
    provider => git,
    source => "https://github.com/VundleVim/Vundle.vim.git"
  }
  exec { 'install-bundles':
    require => [ Vcsrepo["${home}/.vim/bundle/Vundle.vim"], File["${home}/.vim/vimrc_bundle"] ],
    command => "/usr/bin/vim -u ${home}/.vim/vimrc_bundle +BundleInstall +qa",
    environment => [ "HOME=${home}" ]
  }
}

class fontconfig {
  mkdir_p { "${home}/.fonts": }
  config_link { 'fonts/otf-powerlinesymbols': }
  config_link { 'fonts/ttf-sourcecode': }
  mkdir_p { "${home}/.config/fontconfig/conf.d": }
  file { "${home}/.config/fontconfig/conf.d/10-powerline-symbols.conf":
    ensure  => link,
    target  => "${conf}/fonts/10-powerline-symbols.conf",
    require => [ File["${home}/.fonts/otf-powerlinesymbols"],
                 File["${home}/.fonts/ttf-sourcecode"] ]
  }

  exec { "rebuild-fc-cache":
    command     => "/usr/bin/fc-cache",
    environment => [ "HOME=${home}" ],
    subscribe   =>
    [ File["${home}/.fonts/otf-powerlinesymbols"],
      File["${home}/.fonts/ttf-sourcecode"],
      File["${home}/.config/fontconfig/conf.d/10-powerline-symbols.conf"]
    ],
    refreshonly => true
  }
}

class noi3 {
  include fontconfig
  include vimconfig

  exec { 'generate-configs':
    require     => File["${conf}/generated"],
    command     => "/usr/bin/python ${conf}/render_jinja.py ${conf}/${hostname}.config ${conf}/templates",
    environment => [ "HOME=${home}", "OUTPUT_DIRECTORY=${conf}/generated" ]
  }

  config_link { "make-magic":
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/scripts"
  }
  $configs = [ "profile", "bash_profile", "bashrc", "inputrc",
               "gitignore", "tmux.conf" ]
  config_link { $configs: }

  config_link { "gitconfig":
    sourcename => "generated/gitconfig"
  }
}

class common {

  # create dir for generated files
  mkdir_p { "${conf}/generated": }
  # create ~/.local/bin
  mkdir_p { "${home}/.local/bin": }

  include noi3
  include xresources
  include user_crontab
  include i3config
}

node chimaera {
  include common

  config_link { "setup_trackpoint.sh":
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/scripts"
  }
}

node phoenix {
  include common
}

node wyvern {
  include common

  # only wyvern needs custom logout command for now
  config_link { "logout":
    linkprefix => "${home}/.local/bin/",
    targetdir  => "${conf}/i3wm",
    sourcename => "logout.wyvern.sh",
  }
}

node default {
  include common
}
