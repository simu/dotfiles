#!/usr/bin/python3

import click
import json
import os
import shlex
import subprocess
import yaml
import pulsectl

from xdg import XDG_CONFIG_HOME

# fix zoomvol:
# TODO implement
# pulsectl.list_sink_inputs()
# pulsectl.list_clients()
# -> sufficent to find Zoom sink inputs


class PAVolControl:
    _cur_sink = None

    @classmethod
    def create_initial_config(klass, path):
        sink = self._pulsectl.server_info().default_sink_name
        config = {"sink": sink}
        os.makedirs(path.parent, exist_ok=True)
        with open(path, "w") as cfg:
            yaml.dump(config, cfg)

    def __init__(self):
        self._cfgpath = XDG_CONFIG_HOME / "pavolctl" / "config.yaml"
        if not self._cfgpath.exists():
            print(f"Creating config in {self._cfgpath}")
            PAVolControl.create_initial_config(self._cfgpath)
        with open(self._cfgpath) as cfg:
            self._config = yaml.safe_load(cfg)
        self._pulsectl = pulsectl.Pulse("pavolctl")

    @property
    def sink(self):
        if not self._cur_sink or self._cur_sink.name != self._config["sink"]:
            self._cur_sink = list(
                filter(
                    lambda s: s.name == self._config["sink"], self._pulsectl.sink_list()
                )
            )[0]
        return self._cur_sink

    @property
    def available_sinks(self):
        return self._pulsectl.sink_list()

    def set_sink(self, sink):
        self._config["sink"] = sink.name
        with open(self._cfgpath, "w") as cfg:
            yaml.dump(self._config, cfg)
        self._pulsectl.default_set(sink)

    @property
    def pulsectl(self):
        return self._pulsectl


pass_volctl = click.make_pass_decorator(PAVolControl)


@click.group()
@click.pass_context
def main(ctx):
    ctx.obj = PAVolControl()


@main.command(short_help="Adjust volume")
@click.argument("amount")
@pass_volctl
def volume(volctl, amount):
    change = '+' in amount or '-' in amount
    # Convert percentage string into fraction
    if "%" in amount:
        amount = amount.strip("%")
        amount = float(amount)
        amount = amount / 100.0
    else:
        amount = float(amount)

    if change:
        volctl.pulsectl.volume_change_all_chans(volctl.sink, amount)
    else:
        volctl.pulsectl.volume_set_all_chans(volctl.sink, amount)


@main.command(short_help="Control mute. ")
@click.argument("cmd")
@pass_volctl
def mute(volctl, cmd):
    _muted = (volctl.sink.mute == 1)
    if cmd == 'toggle':
        _muted = not _muted
    elif cmd == 'true' or cmd == 'mute':
        _muted = True
    else:
        _muted = False
    volctl.pulsectl.mute(volctl.sink, mute=_muted)


@main.command(short_help="Set sink")
@pass_volctl
def set_sink(volctl):
    sinks = volctl.available_sinks
    sink_name_by_desc = {}
    for s in sinks:
        sink_name_by_desc[s.description] = s
    sinkdescs = sink_name_by_desc.keys()
    dmenu_cmd = shlex.split(f"dmenu -i -l {len(sinkdescs)} -p 'Select PA Sink'")
    try:
        selection = subprocess.check_output(
            dmenu_cmd, input=("\n".join([f"{s}" for s in sinkdescs])).encode("utf-8")
        ).decode("utf-8")
    except subprocess.CalledProcessError as e:
        if e.returncode == 1:
            return
        else:
            raise e
    try:
        sink = sink_name_by_desc[selection.strip()]
    except ValueError:
        print(e)
        return
    volctl.set_sink(sink)


if __name__ == "__main__":
    main.main(prog_name="pavolctl")

# vim: et sw=4 ts=4 sts=4
