# xterm configuration: titles in terminal window, scrolling with scrollbar
set -g terminal-overrides 'xterm*:XT:smcup@:rmcup@'
set-option -g default-terminal "screen-256color"
#source  ~/.local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf

# make make C-b b send C-b to inner sessions (tmux, qemu etc)
set-option -g prefix C-b
bind-key b send-prefix

#bind-key r source-file ~/.tmux.conf

# default statusbar colors
set -g status-fg green
set -g status-bg black

# default window title colors
#set-window-option -g window-status-fg white
#set-window-option -g window-status-bg default

# window renaming on by default
set-option -g set-titles on
set-option -g set-titles-string "#T"
set-window-option -g automatic-rename on

# statusline
set-option -g status-left-length 70
set-option -g status-right-length 50
set -g status-left '[ #[fg=brightyellow]#H #[fg=brightwhite]#W #[fg=green]]['
set -g status-right '#[fg=green]][#[fg=brightyellow]#(uptime | cut -d"," -f 3- | cut -d":" -f2 | tr -d ",") #[fg=green]][ #[fg=brightblue]%Y-%m-%d #[fg=white]%H:%M #[fg=green]]'

# windows
set-window-option -g window-status-current-format "#[fg=red,bold](#[fg=white,bold]#I#[fg=red,bold])"
set-window-option -g window-status-format "#[fg=normal]#I#F$ #W"

#sane scrolling
set-option -g history-limit 5000

# vim style tmux config

set -g base-index 1

# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

# vi is good
setw -g mode-keys vi

# mouse behavior
setw -g mouse on

set-option -g default-terminal screen-256color

bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

# use vim-like keys for splits and windows
bind-key v split-window -h
bind-key s split-window -v
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n 'C-\' run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim$' && tmux send-keys 'C-\\') || tmux select-pane -l"
bind C-l send-keys 'C-l'

bind-key C-o rotate-window

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical

set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80
set-window-option -g display-panes-time 1500
set-window-option -g window-status-current-style fg=magenta

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

bind-key [ copy-mode
bind-key ] paste-buffer

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace xclip -selection clipboard"

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0
