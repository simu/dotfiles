# vim: set et sw=2 sts=2 ft=sh:
function goto_fault_code()
{
  # $1==binary, $2=address
  path=$(addr2line -e $1 $2)
  vim $path
}

function vimrej ()
{
  vim -O ${1}{.rej,}
}

function _kubectx_proxy ()
{
  # Idea: overwrite this function in ~/.local/bash_functions
  return
}

function kubectx ()
{
  if [ -z "${1}" ]; then
    echo "Usage: kubectx <context>"
    return
  fi
  if [ "${1}" == "--clear" ]; then
    unset KUBECONFIG
    return
  fi
  local cluster="${1%%.kubeconfig}"
  local kubecfg=$(eval echo "~/kubeconfigs/${cluster}.kubeconfig")
  local legacy_kubecfg=$(eval echo "~/${cluster}.kubeconfig")
  if [ -f "${kubecfg}" ]; then
    export KUBECONFIG="${kubecfg}"
  elif [ -f "${legacy_kubecfg}" ]; then
    export KUBECONFIG="${legacy_kubecfg}"
  else
    echo "Unknown kubeconfig ${1}".
    return
  fi
  _kubectx_proxy "${cluster}"
  kubectl get nodes
}

function _complete_kubectx ()
{
  local cluster_list=$(find ~/.kube/configs -name '*.kubeconfig' -printf '%P ' | sed 's/\.kubeconfig//g')
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "${cluster_list} --clear" -- $cur ) )
}

complete -F _complete_kubectx kubectx

[ -f ~/.local/bash_functions ] && . ~/.local/bash_functions
