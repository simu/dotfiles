# vim: set et sw=2 sts=2 ft=sh:
function goto_fault_code()
{
  # $1==binary, $2=address
  path=$(addr2line -e $1 $2)
  vim $path
}

function vimrej ()
{
  vim -O ${1}{.rej,}
}

function _kubectx_proxy ()
{
  # Idea: overwrite this function in ~/.local/bash_functions
  return
}

readonly kubeconfig_dir=~/kubeconfigs
function kubectx ()
{
  if [ -z "${1}" ]; then
    echo "Usage: kubectx <context>"
    return
  fi
  if [ "${1}" == "--clear" ]; then
    unset KUBECONFIG
    return
  fi
  local cluster="${1%%.kubeconfig}"
  local kubecfg=$(eval echo "${kubeconfig_dir}/${cluster}.kubeconfig")
  local legacy_kubecfg=$(eval echo "~/${cluster}.kubeconfig")
  if [ -f "${kubecfg}" ]; then
    export KUBECONFIG="${kubecfg}"
  elif [ -f "${legacy_kubecfg}" ]; then
    export KUBECONFIG="${legacy_kubecfg}"
  else
    echo "Unknown kubeconfig ${1}".
    return
  fi
  _kubectx_proxy "${cluster}"
  kubectl get nodes
}

function _complete_kubectx ()
{
  local cluster_list=$(find "${kubeconfig_dir}" -name '*.kubeconfig' -printf '%P ' | sed 's/\.kubeconfig//g')
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "${cluster_list} --clear" -- $cur ) )
}

complete -F _complete_kubectx kubectx

oc_login() {
  local cleanup_proxy
  local cleanup_no_proxy
  if [ -z "$KUBECONFIG" ]; then
    echo "Select cluster first"
    return 1
  fi
  if [ -z "${https_proxy}" ]; then
    export https_proxy=$(yq '.clusters[0].cluster."proxy-url"//""' $KUBECONFIG)
    cleanup_proxy=yes
  fi
  if [ -n "${_no_proxy}" ]; then
    if [ -n "${no_proxy}" ]; then
      cleanup_no_proxy="${no_proxy}"
      export no_proxy="${no_proxy},${_no_proxy}"
    else
      export no_proxy="${_no_proxy}"
      cleanup_no_proxy=""
    fi
  fi
  oc login --web "$@"
  if [ "$https_proxy" != "" ]; then
    yq -i '.clusters[0].cluster."proxy-url"=env(https_proxy)' $KUBECONFIG
  fi
  if [ -n "${cleanup_proxy:-}" ]; then
    unset https_proxy
  fi
  if [ -z "${cleanup_no_proxy:-}" ]; then
    unset no_proxy
  else
    export no_proxy="${cleanup_no_proxy}"
  fi
}

oc_login_as_admin() {
  oc_login
  echo "Setting impersonation in kubeconfig"
  yq -i '.users[0].user.as="cluster-admin"' $KUBECONFIG
}

oc_login_clear_admin() {
  if [ -f "$KUBECONFIG" ]; then
    yq -i 'del(.users[0].user.as)' $KUBECONFIG
  fi
}

[ -f ~/.local/bash_functions ] && . ~/.local/bash_functions
