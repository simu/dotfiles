. $DOTFILES/common
# set terminal lang to something useful
export LANG="en_US.utf8"
export LC_ALL="en_US.utf8"
export LC_MONETARY="de_CH.utf8"
export LC_PAPER="de_CH.utf8"

# set editor
export EDITOR=vim

# assume vim stuff is always in /usr/share/vim
# Seems unnecessary and breaks vimtutor, -SG,2019-02-21
# export VIM=/usr/share/vim

if [[ "$CFLAGS" != *"-std="* ]]; then
    export CFLAGS="$CFLAGS -std=gnu11 -O2 -Wall -Wshadow -Wmissing-field-initializers -Wredundant-decls -Wstrict-prototypes -Wold-style-definition -Werror -ggdb"
fi

# disable lesspipe stuff, avoids
# http://seclists.org/fulldisclosure/2014/Nov/74
unset LESSOPEN
unset LESSCLOSE

export TERM_HAS_AIRLINE_SYMS=0
# try to classify SSH connections for stuff like vim-airline etc
# get IPv4 for home
HOME_IPV4=`dig +short simusan.duckdns.org`
if [ -n "$SSH_CONNECTION" ]; then
	ssh_client_ip=$(echo $SSH_CONNECTION | cut -f 1 -d' ')
	ssh_remote=$(echo $ssh_client_ip | nslookup | grep "name =" | cut -d= -f2 | cut -d' ' -f2)
	case $ssh_remote in
		*.simutech.io*) export TERM_HAS_AIRLINE_SYMS=1;;
		*) export TERM_HAS_AIRLINE_SYMS=0;;
	esac
	case $ssh_client_ip in
		$HOME_IPV4) export TERM_HAS_AIRLINE_SYMS=1;;
		192.168.10.*) export TERM_HAS_AIRLINE_SYMS=1;;
		*) export TERM_HAS_AIRLINE_SYMS=0;;
	esac
else
	# local, assume we have airline syms.
	export TERM_HAS_AIRLINE_SYMS=1
fi

kernel_manufacturer=$(echo `uname -r` |cut -d- -f3)
if [ $kernel_manufacturer == "Microsoft" ]; then
	export WSL=1
else
	export WSL=0
fi

# export Xresources to make xterm usable on HiDPI
export XENVIRONMENT=~/.dotfiles/Xresources

export SSH_AUTH_SOCK=/run/user/1000/keyring/ssh
# multi-login ssh agent, cf, https://superuser.com/a/141233
# don't share socket between hosts when using NFS home directory
ssh_sock_file=~/.ssh/ssh-agent.`hostname -s`.sock
check-ssh-agent || export SSH_AUTH_SOCK=$ssh_sock_file
check-ssh-agent || eval "$(ssh-agent -s -a $ssh_sock_file)" > /dev/null

which vagrant 2>&1 >/dev/null
if [ $? -eq 0 -a -f $DOTFILES/completion/vagrant.sh ]; then
	source $DOTFILES/completion/vagrant.sh
fi

which kubectl 2>&1 >/dev/null
if [ $? -eq 0 ]; then
	source <(kubectl completion bash)
fi

[[ -f ~/.local/bash_environment ]] && . ~/.local/bash_environment
